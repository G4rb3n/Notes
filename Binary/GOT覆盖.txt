GOT表：

概念:每一个外部定义的符号在全局偏移表（Global offset Table）中有相应的条目，
GOT位于ELF的数据段中，叫做GOT段。

作用：把位置无关的地址计算重定位到一个绝对地址。
程序首次调用某个库函数时，运行时连接编辑器（rtld）找到相应的符号，
并将它重定位到GOT之后每次调用这个函数都会将控制权直接转向那个位置，而不再调用rtld。


PLT表：

过程连接表(Procedure Linkage Table)，一个PLT条目对应一个GOT条目

当main()函数开始，会请求plt中这个函数的对应GOT地址，如果第一次调用那么GOT会重定位到plt，
并向栈中压入一个偏移，程序的执行回到_init()函数，rtld得以调用就可以定位printf的符号地址，
第二次运行程序再次调用这个函数时程序跳入plt，对应的GOT入口点就是真实的函数入口地址。

动态连接器并不会把动态库函数在编译的时候就包含到ELF文件中,仅仅是在这个ELF被加载的时候,
才会把那些动态函库数代码加载进来,之前系统只会在ELF文件中的GOT中保留一个调用地址.


GOT覆写技术：

原理：由于GOT表是可写的，把其中的函数地址覆盖为我们shellcode地址，
在程序进行调用这个函数时就会执行shellcode。


linux下面的程序默认没有随机化code段